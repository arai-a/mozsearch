--- ../../sax-js/lib/sax.js	2023-08-17 15:40:28.000000000 -0400
+++ sax.js	2024-05-17 02:02:31
@@ -335,17 +335,20 @@
     ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
     ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
     ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
     ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
     ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
     CLOSE_TAG: S++, // </a
     CLOSE_TAG_SAW_WHITE: S++, // </a   >
     SCRIPT: S++, // <script> ...
-    SCRIPT_ENDING: S++ // <script> ... <
+    SCRIPT_ENDING: S++, // <script> ... <
+    SCRIPT_COMMENT_START: S++, // <script> ... <! ...
+    SCRIPT_COMMENT: S++, // <script> ... <!-- ...
+    SCRIPT_COMMENT_END: S++, // <script> ... <!-- ... - ...
   }
 
   sax.XML_ENTITIES = {
     'amp': '&',
     'gt': '>',
     'lt': '<',
     'quot': '"',
     'apos': "'"
@@ -740,17 +743,21 @@
           }
           tag.ns[local] = parser.attribValue
         }
       }
 
       // defer onattribute events until all attributes have been seen
       // so any new bindings can take effect. preserve attribute order
       // so deferred events can be emitted in document order
-      parser.attribList.push([parser.attribName, parser.attribValue])
+      parser.attribList.push([parser.attribName, parser.attribValue,
+                              parser.attribNameLine,
+                              parser.attribNameColumn,
+                              parser.attribValueLine,
+                              parser.attribValueColumn])
     } else {
       // in non-xmlns mode, we can emit the event right away
       parser.tag.attributes[parser.attribName] = parser.attribValue
       emitNode(parser, 'onattribute', {
         name: parser.attribName,
         value: parser.attribValue
       })
     }
@@ -796,17 +803,21 @@
         var prefix = qualName.prefix
         var local = qualName.local
         var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
         var a = {
           name: name,
           value: value,
           prefix: prefix,
           local: local,
-          uri: uri
+          uri: uri,
+          nameLine: nv[2],
+          nameColumn: nv[3],
+          valueLine: nv[4],
+          valueColumn: nv[5],
         }
 
         // if there's any attributes with an undefined namespace,
         // then fail on them now.
         if (prefix && prefix !== 'xmlns' && !uri) {
           strictFail(parser, 'Unbound namespace prefix: ' +
             JSON.stringify(prefix))
           a.uri = prefix
@@ -840,27 +851,16 @@
   function closeTag (parser) {
     if (!parser.tagName) {
       strictFail(parser, 'Weird empty close tag.')
       parser.textNode += '</>'
       parser.state = S.TEXT
       return
     }
 
-    if (parser.script) {
-      if (parser.tagName !== 'script') {
-        parser.script += '</' + parser.tagName + '>'
-        parser.tagName = ''
-        parser.state = S.SCRIPT
-        return
-      }
-      emitNode(parser, 'onscript', parser.script)
-      parser.script = ''
-    }
-
     // first make sure that the closing tag actually exists.
     // <a><b></c></b></a> will close everything, otherwise.
     var t = parser.tags.length
     var tagName = parser.tagName
     if (!parser.strict) {
       tagName = tagName[parser.looseCase]()
     }
     var closeTo = tagName
@@ -929,16 +929,21 @@
       } else {
         entity = entity.slice(1)
         num = parseInt(entity, 10)
         numStr = num.toString(10)
       }
     }
     entity = entity.replace(/^0+/, '')
     if (isNaN(num) || numStr.toLowerCase() !== entity) {
+      strictFail(parser, 'Invalid character entity')
+      return '&' + parser.entity + ';'
+    }
+
+    if (num < 0 || num > 0x10FFFF) {
       strictFail(parser, 'Invalid character entity')
       return '&' + parser.entity + ';'
     }
 
     return String.fromCodePoint(num)
   }
 
   function beginWhiteSpace (parser, c) {
@@ -1041,30 +1046,81 @@
             }
           }
           continue
 
         case S.SCRIPT:
           // only non-strict
           if (c === '<') {
             parser.state = S.SCRIPT_ENDING
+            parser.scriptEnding = c
           } else {
             parser.script += c
           }
           continue
 
-        case S.SCRIPT_ENDING:
-          if (c === '/') {
-            parser.state = S.CLOSE_TAG
-          } else {
-            parser.script += '<' + c
+        case S.SCRIPT_ENDING: {
+          parser.scriptEnding += c
+
+          const current = parser.scriptEnding.toLowerCase()
+          if (current === "</script>") {
+            emitNode(parser, 'onscript', parser.script)
+            parser.script = ''
+
+            parser.tagName = 'script'
+            closeTag(parser)
+          } else if (current === "<!") {
+            parser.script += parser.scriptEnding
+            parser.scriptCommentStart = parser.scriptEnding
+            parser.scriptEnding = ''
+            parser.state = S.SCRIPT_COMMENT_START
+          } else if (!"</script>".startsWith(current)) {
+            parser.script += parser.scriptEnding
+            parser.scriptEnding = ''
             parser.state = S.SCRIPT
           }
           continue
+        }
 
+        case S.SCRIPT_COMMENT_START: {
+          parser.script += c
+          parser.scriptCommentStart += c
+
+          const current = parser.scriptCommentStart
+          if (current == "<!--") {
+            parser.state = S.SCRIPT_COMMENT
+          } else if (!"<!--".startsWith(current)) {
+            parser.state = S.SCRIPT
+          }
+          continue
+        }
+
+        case S.SCRIPT_COMMENT: {
+          parser.script += c
+
+          if (c == '-') {
+            parser.state = S.SCRIPT_COMMENT_END
+            parser.scriptCommentEnd = c
+          }
+          continue
+        }
+
+        case S.SCRIPT_COMMENT_END: {
+          parser.script += c
+          parser.scriptCommentEnd += c
+
+          const current = parser.scriptCommentEnd
+          if (current == "-->") {
+            parser.state = S.SCRIPT
+          } else if (!"-->".startsWith(current)) {
+            parser.state = S.SCRIPT_COMMENT
+          }
+          continue
+        }
+
         case S.OPEN_WAKA:
           // either a /, ?, !, or text is coming next.
           if (c === '!') {
             parser.state = S.SGML_DECL
             parser.sgmlDecl = ''
           } else if (isWhitespace(c)) {
             // wait for it...
           } else if (isMatch(nameStart, c)) {
@@ -1302,16 +1358,18 @@
           if (isWhitespace(c)) {
             continue
           } else if (c === '>') {
             openTag(parser)
           } else if (c === '/') {
             parser.state = S.OPEN_TAG_SLASH
           } else if (isMatch(nameStart, c)) {
             parser.attribName = c
+            parser.attribNameLine = parser.line
+            parser.attribNameColumn = parser.column - 1
             parser.attribValue = ''
             parser.state = S.ATTRIB_NAME
           } else {
             strictFail(parser, 'Invalid attribute name')
           }
           continue
 
         case S.ATTRIB_NAME:
@@ -1335,43 +1393,51 @@
           if (c === '=') {
             parser.state = S.ATTRIB_VALUE
           } else if (isWhitespace(c)) {
             continue
           } else {
             strictFail(parser, 'Attribute without value')
             parser.tag.attributes[parser.attribName] = ''
             parser.attribValue = ''
+            parser.attribNameLine = parser.line
+            parser.attribNameColumn = parser.column - 1
             emitNode(parser, 'onattribute', {
               name: parser.attribName,
               value: ''
             })
             parser.attribName = ''
             if (c === '>') {
               openTag(parser)
             } else if (isMatch(nameStart, c)) {
               parser.attribName = c
+              parser.attribNameLine = parser.line
+              parser.attribNameColumn = parser.column - 1
               parser.state = S.ATTRIB_NAME
             } else {
               strictFail(parser, 'Invalid attribute name')
               parser.state = S.ATTRIB
             }
           }
           continue
 
         case S.ATTRIB_VALUE:
           if (isWhitespace(c)) {
             continue
           } else if (isQuote(c)) {
             parser.q = c
             parser.state = S.ATTRIB_VALUE_QUOTED
+            parser.attribValueLine = parser.line
+            parser.attribValueColumn = parser.column
           } else {
             strictFail(parser, 'Unquoted attribute value')
             parser.state = S.ATTRIB_VALUE_UNQUOTED
             parser.attribValue = c
+            parser.attribValueLine = parser.line
+            parser.attribValueColumn = parser.column - 1
           }
           continue
 
         case S.ATTRIB_VALUE_QUOTED:
           if (c !== parser.q) {
             if (c === '&') {
               parser.state = S.ATTRIB_VALUE_ENTITY_Q
             } else {
@@ -1389,16 +1455,18 @@
             parser.state = S.ATTRIB
           } else if (c === '>') {
             openTag(parser)
           } else if (c === '/') {
             parser.state = S.OPEN_TAG_SLASH
           } else if (isMatch(nameStart, c)) {
             strictFail(parser, 'No whitespace between attributes')
             parser.attribName = c
+            parser.attribNameLine = parser.line
+            parser.attribNameColumn = parser.column - 1
             parser.attribValue = ''
             parser.state = S.ATTRIB_NAME
           } else {
             strictFail(parser, 'Invalid attribute name')
           }
           continue
 
         case S.ATTRIB_VALUE_UNQUOTED:
@@ -1418,33 +1486,24 @@
           }
           continue
 
         case S.CLOSE_TAG:
           if (!parser.tagName) {
             if (isWhitespace(c)) {
               continue
             } else if (notMatch(nameStart, c)) {
-              if (parser.script) {
-                parser.script += '</' + c
-                parser.state = S.SCRIPT
-              } else {
-                strictFail(parser, 'Invalid tagname in closing tag.')
-              }
+              strictFail(parser, 'Invalid tagname in closing tag.')
             } else {
               parser.tagName = c
             }
           } else if (c === '>') {
             closeTag(parser)
           } else if (isMatch(nameBody, c)) {
             parser.tagName += c
-          } else if (parser.script) {
-            parser.script += '</' + parser.tagName
-            parser.tagName = ''
-            parser.state = S.SCRIPT
           } else {
             if (!isWhitespace(c)) {
               strictFail(parser, 'Invalid tagname in closing tag')
             }
             parser.state = S.CLOSE_TAG_SAW_WHITE
           }
           continue
 
